predict(fit.cl, newdata = newdata, interval = "confidence")
litters.lm <- lm(brainwt~bodywt+ lsize, data = litters)
litters.lm
new.df <- data.frame(bodywt=7, lsize=10)
predict(litters.lm, newdata = new.df, confidence = "prediction", level = 0.95)
fit.cl <- lm(brainwt ~  bodywt + lsize, data = litters)
fit.a <- lm.ridge(brainwt ~  bodywt + lsize, data = litters)
coef(fit.a)
newdata <- c(1,7,10)
newdata <- data.frame(bodywt = 7, lsize = 10)
y.pred <- sum(coef(fit.a) * newdata)
y.pred
predict(fit.cl, newdata = newdata, interval = "confidence")
new.df <- data.frame(bodywt=7, lsize=10)
predict(litters.lm, newdata = new.df, confidence = "prediction", level = 0.95)
new.df <- data.frame(bodywt=7, lsize=10)
predict(litters.lm, newdata = new.df, interval = "confidence", level = 0.95)
fit.cl <- lm(brainwt ~  bodywt + lsize, data = litters)
fit.a <- lm.ridge(brainwt ~  bodywt + lsize, data = litters)
coef(fit.a)
newdata <- c(1,7,10)
newdata <- data.frame(bodywt = 7, lsize = 10)
y.pred <- sum(coef(fit.a) * newdata)
y.pred
predict(fit.cl, newdata = newdata, interval = "confidence")
new.df <- data.frame(bodywt=7, lsize=10)
predict(litters.lm, newdata = new.df, interval = "confidence", level = 0.95)
model <- glm(clinically.important.brain.injury~., family = "binomial" , data = minor.head.injury)
library("DAAG")
library("lattice")
plot(x = nihills$climb, y = nihills$time, xlab = "climb", ylab = "time")
text(x = nihills$climb, y = nihills$time, labels = ifelse(nihills>2000, rownames(nihills), NA), cex = 0.7, pos=1)
nihills.lm <- lm(time ~ dist+climb, data=nihills)
nihills2.lm <- lm(time ~ dist+climb+dist*climb, data=nihills)
anova(nihills.lm, nihills2.lm)
par(mfrow=c(2,2))
plot(nihills.lm)
par(mfrow=c(2,2))
plot(nihills2.lm)
new_data = nihills[-c(10,16,19),]
plot(x = new_data$climb, y = new_data$time, xlab = "climb", ylab = "time")
text(x = new_data$climb, y = new_data$time, labels = ifelse(nihills>2000, rownames(new_data), NA), cex = 0.7, pos=1)
new_data.lm <- lm(time ~ dist+climb, data=new_data)
new_data2.lm <- lm(time ~ dist+climb+dist*climb, data=new_data)
anova(new_data.lm, new_data2.lm)
vif(lm(brainwt~bodywt + lsize, data = litters ))
plot(x = litters$bodywt, y = litters$lsize, xlab ="bodywt",ylab = "lsize" )
library(MASS)
select(lm.ridge(brainwt~bodywt+ lsize, data = litters, lambda = seq(0, 0.2, 0.001)))
litters.ridge <- lm.ridge(brainwt~bodywt+ lsize, data = litters, lambda = 0.118)
litters.ridge
coef(litters.ridge)
litters.lm <- lm(brainwt~bodywt+ lsize, data = litters)
litters.lm
library(boot)
new.df <- data.frame(bodywt=7, lsize=10)
predict(litters.lm, newdata = new.df, interval = "confidence", level = 0.95)
points <- c(1, 7, 10)
linRegr <- function(data, index){
linFit <- lm(brainwt~bodywt+ lsize, data = data, subset = index)
y <- sum(linFit$coefficients*points)
return(y)
}
boot.lin <- boot(litters, statistic = linRegr, R = 1000)
boot.ci(boot.lin, conf = 0.95, type = "perc")
points <- c(1, 7, 10)
ridgeRegr <- function(data, index){
ridgeFit <-  lm.ridge(brainwt~bodywt+ lsize, data = data, subset = index, lambda = 0.118)
y <- sum(coef(ridgeFit)*points)
return(y)
}
boot.ridge <- boot(litters, statistic = ridgeRegr, R = 1000)
boot.ci(boot.ridge, conf = 0.95, type = "perc")
library("MPV")
#head(table.b3)
plot(x = table.b3$x1, y = table.b3$y, xlab = "displacement", ylab = "mpg", main = "Scatterplot")
library("DAAG")
library("lattice")
myPanel <- function(x,y,...) {
panel.xyplot(x,y,...)
panel.abline(lm(y~x),...)
}
xyplot(y~x1, groups = x11, xlab = "displacement", ylab = "mpg",
auto.key = list(title = "type of transmission",corner = c(0.7, 1), cex=1.0),
panel = panel.superpose, panel.groups = myPanel,
data = table.b3)
keep <- table.b3$x11 == 0
manual <- table.b3[keep,]
automatic <- table.b3[!keep,]
par(mfrow=c(1,2))
automatic.lm <- lm(y~x1, data =automatic)
plot(y = automatic$y, x = automatic$x1, main ="automatic transmission", xlab = "displacement", ylab="mpg")
abline(automatic.lm, col = "red")
manual.lm <- lm(y~x1, data =manual)
plot(y = manual$y, x = manual$x1, main ="manual transmission", xlab = "displacement", ylab="mpg")
abline(manual.lm, col = "lightblue")
fit <- lm(y~x1*x11, data = table.b3)
plot(x = table.b3$x1, y = table.b3$y, xlab = "displacement", ylab = "mpg", main = "Scatterplot")
x = sort(table.b3$x1)
y = fit$fitted.values[order(table.b3$x1)]
lines(x,y)
summary(fit)
par(mfrow = c(2,2))
plot(fit)
new_data <- table.b3[-5,]
fit2 <- lm(y~x1*x11, data = new_data)
summary(fit2)
xyplot(resid(fit) ~ x7, group=x11,auto.key = list(title = "type of transmission",corner = c(0.7, 1), cex=1.0), data=table.b3)
conc = c(0.1, 0.5, 1, 10, 20, 30, 50, 70 ,80 ,100,150)
no   = c(7, 1, 10, 9, 2, 9, 13, 1, 1, 4, 3)
yes  = c(0 ,0 ,3 ,4 ,0 ,6 ,7 ,0, 0, 1, 7)
total = yes + no
prob = yes/n
model <-glm(prob~I(log(conc)), family=binomial, weights=total)
summary(model)
model <- glm(clinically.important.brain.injury~., family = "binomial" , data = minor.head.injury)
model <- glm(clinically.important.brain.injury~., family = "binomial" , data = head.injury)
model <- glm(clinically.important.brain.injury~., family = "binomial" , data = head.injury)
model
glm(clinically.important.brain.injury~., family = "binomial" , data = head.injury)
model <- glm(clinically.important.brain.injury~., family = "binomial" , data = head.injury)
model
poissim <- poissonsim(x = seq(0, 1, length=101), a = 2, b = -4, seed=1234)
poissim2 <- poissonsim(x = seq(0, 1, length=101), a = 2, b = -4,slope.sd = 5, seed=1234)
library("DAAG")
library("lattice")
plot(x = nihills$climb, y = nihills$time, xlab = "climb", ylab = "time")
text(x = nihills$climb, y = nihills$time, labels = ifelse(nihills>2000, rownames(nihills), NA), cex = 0.7, pos=1)
nihills.lm <- lm(time ~ dist+climb, data=nihills)
nihills2.lm <- lm(time ~ dist+climb+dist*climb, data=nihills)
anova(nihills.lm, nihills2.lm)
par(mfrow=c(2,2))
plot(nihills.lm)
par(mfrow=c(2,2))
plot(nihills2.lm)
new_data = nihills[-c(10,16,19),]
plot(x = new_data$climb, y = new_data$time, xlab = "climb", ylab = "time")
text(x = new_data$climb, y = new_data$time, labels = ifelse(nihills>2000, rownames(new_data), NA), cex = 0.7, pos=1)
new_data.lm <- lm(time ~ dist+climb, data=new_data)
new_data2.lm <- lm(time ~ dist+climb+dist*climb, data=new_data)
anova(new_data.lm, new_data2.lm)
vif(lm(brainwt~bodywt + lsize, data = litters ))
plot(x = litters$bodywt, y = litters$lsize, xlab ="bodywt",ylab = "lsize" )
library(MASS)
select(lm.ridge(brainwt~bodywt+ lsize, data = litters, lambda = seq(0, 0.2, 0.001)))
litters.ridge <- lm.ridge(brainwt~bodywt+ lsize, data = litters, lambda = 0.118)
litters.ridge
coef(litters.ridge)
litters.lm <- lm(brainwt~bodywt+ lsize, data = litters)
litters.lm
library(boot)
new.df <- data.frame(bodywt=7, lsize=10)
predict(litters.lm, newdata = new.df, interval = "confidence", level = 0.95)
points <- c(1, 7, 10)
linRegr <- function(data, index){
linFit <- lm(brainwt~bodywt+ lsize, data = data, subset = index)
y <- sum(linFit$coefficients*points)
return(y)
}
boot.lin <- boot(litters, statistic = linRegr, R = 1000)
boot.ci(boot.lin, conf = 0.95, type = "perc")
points <- c(1, 7, 10)
ridgeRegr <- function(data, index){
ridgeFit <-  lm.ridge(brainwt~bodywt+ lsize, data = data, subset = index, lambda = 0.118)
y <- sum(coef(ridgeFit)*points)
return(y)
}
boot.ridge <- boot(litters, statistic = ridgeRegr, R = 1000)
boot.ci(boot.ridge, conf = 0.95, type = "perc")
library("MPV")
#head(table.b3)
plot(x = table.b3$x1, y = table.b3$y, xlab = "displacement", ylab = "mpg", main = "Scatterplot")
library("DAAG")
library("lattice")
myPanel <- function(x,y,...) {
panel.xyplot(x,y,...)
panel.abline(lm(y~x),...)
}
xyplot(y~x1, groups = x11, xlab = "displacement", ylab = "mpg",
auto.key = list(title = "type of transmission",corner = c(0.7, 1), cex=1.0),
panel = panel.superpose, panel.groups = myPanel,
data = table.b3)
keep <- table.b3$x11 == 0
manual <- table.b3[keep,]
automatic <- table.b3[!keep,]
par(mfrow=c(1,2))
automatic.lm <- lm(y~x1, data =automatic)
plot(y = automatic$y, x = automatic$x1, main ="automatic transmission", xlab = "displacement", ylab="mpg")
abline(automatic.lm, col = "red")
manual.lm <- lm(y~x1, data =manual)
plot(y = manual$y, x = manual$x1, main ="manual transmission", xlab = "displacement", ylab="mpg")
abline(manual.lm, col = "lightblue")
fit <- lm(y~x1*x11, data = table.b3)
plot(x = table.b3$x1, y = table.b3$y, xlab = "displacement", ylab = "mpg", main = "Scatterplot")
x = sort(table.b3$x1)
y = fit$fitted.values[order(table.b3$x1)]
lines(x,y)
summary(fit)
par(mfrow = c(2,2))
plot(fit)
new_data <- table.b3[-5,]
fit2 <- lm(y~x1*x11, data = new_data)
summary(fit2)
xyplot(resid(fit) ~ x7, group=x11,auto.key = list(title = "type of transmission",corner = c(0.7, 1), cex=1.0), data=table.b3)
conc = c(0.1, 0.5, 1, 10, 20, 30, 50, 70 ,80 ,100,150)
no   = c(7, 1, 10, 9, 2, 9, 13, 1, 1, 4, 3)
yes  = c(0 ,0 ,3 ,4 ,0 ,6 ,7 ,0, 0, 1, 7)
total = yes + no
prob = yes/n
model <-glm(prob~I(log(conc)), family=binomial, weights=total)
summary(model)
model <- glm(clinically.important.brain.injury~., family = "binomial" , data = head.injury)
model
logit = logisticsim(x = seq(0, 1, length=101), a = 2, b = -4, seed=1234)
plot(x = logit$x, y = logit$y)
fit <- glm(y~x, family = binomial(link = "logit"), data = logit )
summary(fit)
new_obs <- logisticsim(x = seq(0.89, 0.99 ,length = 11), a = 2, b = -4, seed = 1234)
pred_obs <-  logisticsim(x = seq(0.89, 0.99, length=11), a =2.4480 , b = -5.0736, seed=1234)
poissim <- poissonsim(x = seq(0, 1, length=101), a = 2, b = -4, seed=1234)
poissim2 <- poissonsim(x = seq(0, 1, length=101), a = 2, b = -4,slope.sd = 5, seed=1234)
poissim2 <- poissonsim(x = seq(0, 1, length=101), a = 2, b = -4,slope.sd = 5, seed=1234)
fit.poiss <- fit <- glm(y~x, family = "poisson", data = poissim )
fit.quasipoiss <-fit <- glm(y~x, family = "quasipoisson", data = poissim )
poissim2 <- poissonsim(x = seq(0, 1, length=101), a = 2, b = -4,slope.sd = 5, seed=1234)
fit.poiss  <- glm(y~x, family = "poisson", data = poissim2 )
fit.quasipoiss  <- glm(y~x, family = "quasipoisson", data = poissim2 )
poissim2 <- poissonsim(x = seq(0, 1, length=101), a = 2, b = -4,slope.sd = 5, seed=1234)
fit.poiss  <- glm(y~x, family = "poisson", data = poissim2 )
fit.poiss
fit.quasipoiss  <- glm(y~x, family = "quasipoisson", data = poissim2 )
fit.quasipoiss
poissim2 <- poissonsim(x = seq(0, 1, length=101), a = 2, b = -4,slope.sd = 5, seed=1234)
fit.poiss  <- glm(y~x, family = poisson(link = "log"), data = poissim2 )
fit.poiss
fit.quasipoiss  <- glm(y~x, family = quasipoisson(link = "log"), data = poissim2 )
fit.quasipoiss
new_obs <- logisticsim(x = seq(0.89, 0.99 ,length = 11), a = 2, b = -4, seed = 1234)
library("DAAG")
library("lattice")
plot(x = nihills$climb, y = nihills$time, xlab = "climb", ylab = "time")
text(x = nihills$climb, y = nihills$time, labels = ifelse(nihills>2000, rownames(nihills), NA), cex = 0.7, pos=1)
nihills.lm <- lm(time ~ dist+climb, data=nihills)
nihills2.lm <- lm(time ~ dist+climb+dist*climb, data=nihills)
anova(nihills.lm, nihills2.lm)
par(mfrow=c(2,2))
plot(nihills.lm)
par(mfrow=c(2,2))
plot(nihills2.lm)
new_data = nihills[-c(10,16,19),]
plot(x = new_data$climb, y = new_data$time, xlab = "climb", ylab = "time")
text(x = new_data$climb, y = new_data$time, labels = ifelse(nihills>2000, rownames(new_data), NA), cex = 0.7, pos=1)
new_data.lm <- lm(time ~ dist+climb, data=new_data)
new_data2.lm <- lm(time ~ dist+climb+dist*climb, data=new_data)
anova(new_data.lm, new_data2.lm)
vif(lm(brainwt~bodywt + lsize, data = litters ))
plot(x = litters$bodywt, y = litters$lsize, xlab ="bodywt",ylab = "lsize" )
library(MASS)
select(lm.ridge(brainwt~bodywt+ lsize, data = litters, lambda = seq(0, 0.2, 0.001)))
litters.ridge <- lm.ridge(brainwt~bodywt+ lsize, data = litters, lambda = 0.118)
litters.ridge
coef(litters.ridge)
litters.lm <- lm(brainwt~bodywt+ lsize, data = litters)
litters.lm
library(boot)
new.df <- data.frame(bodywt=7, lsize=10)
predict(litters.lm, newdata = new.df, interval = "confidence", level = 0.95)
points <- c(1, 7, 10)
linRegr <- function(data, index){
linFit <- lm(brainwt~bodywt+ lsize, data = data, subset = index)
y <- sum(linFit$coefficients*points)
return(y)
}
boot.lin <- boot(litters, statistic = linRegr, R = 1000)
boot.ci(boot.lin, conf = 0.95, type = "perc")
points <- c(1, 7, 10)
ridgeRegr <- function(data, index){
ridgeFit <-  lm.ridge(brainwt~bodywt+ lsize, data = data, subset = index, lambda = 0.118)
y <- sum(coef(ridgeFit)*points)
return(y)
}
boot.ridge <- boot(litters, statistic = ridgeRegr, R = 1000)
boot.ci(boot.ridge, conf = 0.95, type = "perc")
library("MPV")
#head(table.b3)
plot(x = table.b3$x1, y = table.b3$y, xlab = "displacement", ylab = "mpg", main = "Scatterplot")
library("DAAG")
library("lattice")
myPanel <- function(x,y,...) {
panel.xyplot(x,y,...)
panel.abline(lm(y~x),...)
}
xyplot(y~x1, groups = x11, xlab = "displacement", ylab = "mpg",
auto.key = list(title = "type of transmission",corner = c(0.7, 1), cex=1.0),
panel = panel.superpose, panel.groups = myPanel,
data = table.b3)
keep <- table.b3$x11 == 0
manual <- table.b3[keep,]
automatic <- table.b3[!keep,]
par(mfrow=c(1,2))
automatic.lm <- lm(y~x1, data =automatic)
plot(y = automatic$y, x = automatic$x1, main ="automatic transmission", xlab = "displacement", ylab="mpg")
abline(automatic.lm, col = "red")
manual.lm <- lm(y~x1, data =manual)
plot(y = manual$y, x = manual$x1, main ="manual transmission", xlab = "displacement", ylab="mpg")
abline(manual.lm, col = "lightblue")
fit <- lm(y~x1*x11, data = table.b3)
plot(x = table.b3$x1, y = table.b3$y, xlab = "displacement", ylab = "mpg", main = "Scatterplot")
x = sort(table.b3$x1)
y = fit$fitted.values[order(table.b3$x1)]
lines(x,y)
summary(fit)
par(mfrow = c(2,2))
plot(fit)
new_data <- table.b3[-5,]
fit2 <- lm(y~x1*x11, data = new_data)
summary(fit2)
xyplot(resid(fit) ~ x7, group=x11,auto.key = list(title = "type of transmission",corner = c(0.7, 1), cex=1.0), data=table.b3)
conc = c(0.1, 0.5, 1, 10, 20, 30, 50, 70 ,80 ,100,150)
no   = c(7, 1, 10, 9, 2, 9, 13, 1, 1, 4, 3)
yes  = c(0 ,0 ,3 ,4 ,0 ,6 ,7 ,0, 0, 1, 7)
total = yes + no
prob = yes/total
model <-glm(prob~I(log(conc)), family=binomial, weights=total)
summary(model)
model <- glm(clinically.important.brain.injury~., family = "binomial" , data = head.injury)
model
logit = logisticsim(x = seq(0, 1, length=101), a = 2, b = -4, seed=1234)
plot(x = logit$x, y = logit$y)
fit <- glm(y~x, family = binomial(link = "logit"), data = logit )
summary(fit)
new_obs <- logisticsim(x = seq(0.89, 0.99 ,length = 11), a = 2, b = -4, seed = 1234)
pred_obs <-  logisticsim(x = seq(0.89, 0.99, length=11), a =2.4480 , b = -5.0736, seed=1234)
rmse <- sqrt(mean(new_obs$y - pred_obs$y))
poissim <- poissonsim(x = seq(0, 1, length=101), a = 2, b = -4, seed=1234)
poissim2 <- poissonsim(x = seq(0, 1, length=101), a = 2, b = -4,slope.sd = 5, seed=1234)
fit.poiss  <- glm(y~x, family = poisson(link = "log"), data = poissim2 )
fit.poiss
fit.quasipoiss  <- glm(y~x, family = quasipoisson(link = "log"), data = poissim2 )
fit.quasipoiss
new_obs <- logisticsim(x = seq(0.89, 0.99 ,length = 11), a = 2, b = -4, seed = 1234)
pred_obs <-  logisticsim(x = seq(0.89, 0.99, length=11), a =2.4480 , b = -5.0736, seed=1234)
rmse <- sqrt(mean(new_obs$y - pred_obs$y))
rmse
new_obs <- logisticsim(x = seq(0.89, 0.99 ,length = 11), a = 2, b = -4, seed = 1234)
pred_obs <- predict.glm(fit,newdata = new_obs)#logisticsim(x = seq(0.89, 0.99, length=11), a =2.4480 , b = -5.0736, seed=1234)
rmse <- sqrt(mean(new_obs$y - pred_obs$y))
new_obs <- logisticsim(x = seq(0.89, 0.99 ,length = 11), a = 2, b = -4, seed = 1234)
pred_obs <- predict.glm(fit,newdata = new_obs)#logisticsim(x = seq(0.89, 0.99, length=11), a =2.4480 , b = -5.0736, seed=1234)
rmse <- sqrt(mean(new_obs$y - pred_obs))
rmse
new_obs <- logisticsim(x = seq(0.09, 0.99 ,length = 90), a = 2, b = -4, seed = 1234)
pred_obs <- predict.glm(fit,newdata = new_obs)#logisticsim(x = seq(0.89, 0.99, length=11), a =2.4480 , b = -5.0736, seed=1234)
rmse <- sqrt(mean(new_obs$y - pred_obs))
rmse
new_obs <- logisticsim(x = seq(0.09, 0.99 ,length = 100), a = 2, b = -4, seed = 1234)
pred_obs <- predict.glm(fit,newdata = new_obs)#logisticsim(x = seq(0.89, 0.99, length=11), a =2.4480 , b = -5.0736, seed=1234)
rmse <- sqrt(mean(new_obs$y - pred_obs))
rmse
new_obs <- logisticsim(x = seq(0, 1 ,length = 101), a = 2, b = -4, seed = 2019)
pred_obs <- predict.glm(fit,newdata = new_obs)#logisticsim(x = seq(0.89, 0.99, length=11), a =2.4480 , b = -5.0736, seed=1234)
rmse <- sqrt(mean(new_obs$y - pred_obs))
rmse
poissim$y
newobs$y
new_obs$y
new_obs <- logisticsim(x = seq(0.1, 1.1 ,length = 101), a = 2, b = -4, seed = 2019)
pred_obs <- predict.glm(fit,newdata = new_obs)#logisticsim(x = seq(0.89, 0.99, length=11), a =2.4480 , b = -5.0736, seed=1234)
rmse <- sqrt(mean(new_obs$y - pred_obs))
rmse
new_obs <- logisticsim(x = seq(1, 2 ,length = 101), a = 2, b = -4, seed = 2019)
pred_obs <- predict.glm(fit,newdata = new_obs)#logisticsim(x = seq(0.89, 0.99, length=11), a =2.4480 , b = -5.0736, seed=1234)
rmse <- sqrt(mean(new_obs$y - pred_obs))
rmse
new_obs <- logisticsim(x = seq(-0.99, 0.99  ,length = 101), a = 2, b = -4, seed = 2019)
pred_obs <- predict.glm(fit,newdata = new_obs)#logisticsim(x = seq(0.89, 0.99, length=11), a =2.4480 , b = -5.0736, seed=1234)
rmse <- sqrt(mean(new_obs$y - pred_obs))
rmse
new_obs <- logisticsim(x = seq(0.09, 0.99  ,length = 91), a = 2, b = -4, seed = 2019)
pred_obs <- predict.glm(fit,newdata = new_obs)#logisticsim(x = seq(0.89, 0.99, length=11), a =2.4480 , b = -5.0736, seed=1234)
rmse <- sqrt(mean(new_obs$y - pred_obs))
rmse
mean(new_obs$y)
setwd("~/Desktop/Magistrale/ParallelProgramming/DSSC/Lab/Day2")
critical <- read.table("critical.txt", header = FALSE, sep = " ")
critical <- read.table(file ="critical.txt", header = FALSE, sep = " ")
critical <- read.table(file ="atomic.txt", header = FALSE, sep = " ")
setwd("~/Desktop/Magistrale/ParallelProgramming/DSSC/Lab/Day2")
critical <- read.table(file ="critical.txt", header = FALSE, sep = " ")
critical <- read.table(file ="critical.txt", header = FALSE)
setwd("~/Desktop/Magistrale/ParallelProgramming/DSSC/Lab/Day2")
critical <- read.table(file ="critical.txt", header = FALSE)
critical
critical <- read.table(file ="critical.txt", header = FALSE)
critical <- read.table(path ="/Users/nicolameneghini/Desktop/Magistrale/ParallelProgramming/Lab/Day2/", file ="critical.txt", header = FALSE)
library("ggplot2")
critical <- read.table(file ="critical.txt", header = FALSE)
setwd("~/Desktop/Magistrale/ParallelProgramming/DSSC/Lab/Day2/")
critical <- read.table(file ="critical.txt", header = FALSE)
critical
setwd("~/Desktop/Magistrale/ParallelProgramming/DSSC/Lab/")
setwd("~/Desktop/Magistrale/ParallelProgramming/DSSC/Lab/Day2")
critical <- read.table(file ="critical.txt", header = FALSE)
setwd("~/Desktop/Magistrale/ParallelProgramming/DSSC/Lab/Day2/")
critical <- read.table(file ="critical.txt", header = FALSE)
critical
setwd("~/Desktop/Magistrale/ParallelProgramming/DSSC/Lab/Day2")
critical <- read.table(file ="critical.txt", header = FALSE)
ggplot2(aes(x = critical.x, y = critical.x))
ggplot(aes(x = critical.x, y = critical.x))
ggplot(crtical, aes(x = critical.x, y = critical.x))
critical <- data.frame(critical.x,critical.y )
critical.x <- c(1,2,4,8,16,20)
critical.y <- c(1.951422, 1.000389 ,0.510460,0.272301,0.149681,0.432477)
critical <- data.frame(critical.x,critical.y )
ggplot(crtical, aes(x = critical.x, y = critical.x))
ggplot(critical, aes(x = critical.x, y = critical.x))
ggplot(critical, aes(x = critical.x, y = critical.x, color = "red"))
critical
ggplot(critical, aes(x = critical.x, y = critical.x, color = "red"))
ggplot2(critical, aes(x = critical.x, y = critical.x, color = "red"))
ggplot(critical, aes(x = critical.x, y = critical.x, color = "red"))
ggplot(critical, aes(x = critical.x, y = critical.x, color = "red")) + geom_line()
ggplot(critical, aes(x = critical.x, y = critical.y, color = "red")) + geom_line()
critical.y <- c(1.951422, 1.000389 ,0.510460,0.272301,0.149681,0.1432477)
critical <- data.frame(critical.x,critical.y )
ggplot(critical, aes(x = critical.x, y = critical.y, color = "red")) + geom_line()
ggplot(critical, aes(x = critical.x, y = critical.y, color = "red")) + geom_line() + labs(x = "threads", y = "time", title = "Critical")
ggplot(critical, aes(x = critical.x, y = critical.y)) + geom_line() + labs(x = "threads", y = "time", title = "Critical")
ggplot(critical, aes(x = critical.x, y = critical.y, color = "red")) + geom_line() + labs(x = "threads", y = "time", title = "Critical") + theme(legend.position="none")
atomic.y <- c(1.951988,0.987575, 0.520572,0.274537, 0.156306, 0.127563)
atomic <- data.fram(critical.x, atomic.y)
atomic <- data.frame(critical.x, atomic.y)
reduction.y <- c(1.952382,0.996521, 0.509920, 0.274111, 0.149995, 0.136224)
reduction <- data.frame(critical.xreduction.y)
reduction <- data.frame(critical.x,reduction.y)
ggplot() +
geom_line(critical, aes(x = critical.x, y = critical.y, color = "red")) +
geom_line(atomic, aes(x = critical.x, y = atomic.y, color = "blue")) +
geom_line(reduction, aes(x = critical.x, y = reduction.y, color = "green")) +
labs(x = "threads", y = "time", title = "Critical")
ggplot() +
geom_line(critical, aes(x = critical.x, y = critical.y, color = "red")) +
geom_line(atomic, aes(x = critical.x, y = atomic.y, color = "blue")) +
geom_line(reduction, aes(x = critical.x, y = reduction.y, color = "green")) +
labs(x = "threads", y = "time")
ggplot() +
geom_line(critical, aes(x = critical.x, y = critical.y)) +
geom_line(atomic, aes(x = critical.x, y = atomic.y)) +
geom_line(reduction, aes(x = critical.x, y = reduction.y)) +
labs(x = "threads", y = "time")
ggplot() +
geom_line(critical, aes(x = critical.x, y = critical.y)) +
geom_line(atomic, aes(x = critical.x, y = atomic.y)) +
geom_line(reduction, aes(x = critical.x, y = reduction.y))
ggplot() +
geom_line(critical, aes(x = critical.x, y = critical.y)) +
geom_line(atomic, aes(x = critical.x, y = atomic.y)) +
geom_line(reduction, aes(x = critical.x, y = reduction.y))
ggplot() +
geom_line(critical, aes(x = critical.x, y = critical.y)) +
geom_line(atomic, aes(x = critical.x, y = atomic.y)) +
geom_line(reduction, aes(x = critical.x, y = reduction.y))
ggplot() +
geom_point(critical, aes(x = critical.x, y = critical.y)) +
geom_point(atomic, aes(x = critical.x, y = atomic.y)) +
geom_point(reduction, aes(x = critical.x, y = reduction.y))
ggplot() +
geom_line(data = critical, aes(x = critical.x, y = critical.y)) +
geom_line(data = atomic, aes(x = critical.x, y = atomic.y)) +
geom_line(data = reduction, aes(x = critical.x, y = reduction.y))
labs(x = "threads", y = "time")
ggplot() +
geom_line(data = critical, aes(x = critical.x, y = critical.y, color = "red")) +
geom_line(data = atomic, aes(x = critical.x, y = atomic.y, color = "blue")) +
geom_line(data = reduction, aes(x = critical.x, y = reduction.y, color = "green"))
ggplot() +
geom_line(data = critical, aes(x = critical.x, y = critical.y, color = "red")) +
geom_line(data = atomic, aes(x = critical.x, y = atomic.y, color = "blue")) +
geom_line(data = reduction, aes(x = critical.x, y = reduction.y, color = "green"))+
labs(x = "threads", y = "time")
ggplot() +
geom_line(data = critical, aes(x = critical.x, y = critical.y, color = critical)) +
geom_line(data = atomic, aes(x = critical.x, y = atomic.y, color = atomic)) +
geom_line(data = reduction, aes(x = critical.x, y = reduction.y, color = reduction))+
labs(x = "threads", y = "time")
ggplot() +
geom_line(data = critical, aes(x = critical.x, y = critical.y, color = "red")) +
geom_line(data = atomic, aes(x = critical.x, y = atomic.y, color = "blue")) +
geom_line(data = reduction, aes(x = critical.x, y = reduction.y, color = "green"))+
labs(x = "threads", y = "time")
ggplot() +
geom_line(data = critical, aes(x = critical.x, y = critical.y, color = "blue")) +
geom_line(data = atomic, aes(x = critical.x, y = atomic.y, color = "red")) +
geom_line(data = reduction, aes(x = critical.x, y = reduction.y, color = "green"))+
labs(x = "threads", y = "time")
critical.y <- log(c(1.951422, 1.000389 ,0.510460,0.272301,0.149681,0.1432477))
critical <- data.frame(critical.x,critical.y )
atomic.y <- log(c(1.951988,0.987575, 0.520572,0.274537, 0.156306, 0.127563))
atomic <- data.frame(critical.x, atomic.y)
reduction.y <- log(c(1.952382,0.996521, 0.509920, 0.274111, 0.149995, 0.136224))
reduction <- data.frame(critical.x,reduction.y)
ggplot() +
geom_line(data = critical, aes(x = critical.x, y = critical.y, color = "red")) +
geom_line(data = atomic, aes(x = critical.x, y = atomic.y, color = "blue")) +
geom_line(data = reduction, aes(x = critical.x, y = reduction.y, color = "green"))+
labs(x = "threads", y = "time")
ggplot() +
geom_line(data = critical, aes(x = critical.x, y = critical.y, color = "critical")) +
geom_line(data = atomic, aes(x = critical.x, y = atomic.y, color = "atomic")) +
geom_line(data = reduction, aes(x = critical.x, y = reduction.y, color = "reduction"))+
labs(x = "threads", y = "time")
